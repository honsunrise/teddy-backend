// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/content.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/content.proto

It has these top-level messages:
	Tag
	Info
	GetTagReq
	UidPageReq
	GetTagsResp
	PublishInfoReq
	EditInfoReq
	GetInfosReq
	GetInfosResp
	InfoIdReq
	InfoIdPageReq
	UserIdsResp
	InfoIdsResp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = google_protobuf.Empty{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Content service

type ContentService interface {
	GetTags(ctx context.Context, in *GetTagReq, opts ...client.CallOption) (*GetTagsResp, error)
	PublishInfo(ctx context.Context, in *PublishInfoReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	EditInfo(ctx context.Context, in *EditInfoReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	GetInfos(ctx context.Context, in *GetInfosReq, opts ...client.CallOption) (*GetInfosResp, error)
	DeleteInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	WatchInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	LikeInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	UnLikeInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	GetUserLikes(ctx context.Context, in *UidPageReq, opts ...client.CallOption) (*InfoIdsResp, error)
	GetUserUnlikes(ctx context.Context, in *UidPageReq, opts ...client.CallOption) (*InfoIdsResp, error)
	GetInfoLiked(ctx context.Context, in *InfoIdPageReq, opts ...client.CallOption) (*UserIdsResp, error)
	GetInfoUnliked(ctx context.Context, in *InfoIdPageReq, opts ...client.CallOption) (*UserIdsResp, error)
	FavoriteInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	GetUserFavorite(ctx context.Context, in *UidPageReq, opts ...client.CallOption) (*InfoIdsResp, error)
	GetInfoFavorited(ctx context.Context, in *InfoIdPageReq, opts ...client.CallOption) (*UserIdsResp, error)
}

type contentService struct {
	c    client.Client
	name string
}

func NewContentService(name string, c client.Client) ContentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.teddy.srv.content"
	}
	return &contentService{
		c:    c,
		name: name,
	}
}

func (c *contentService) GetTags(ctx context.Context, in *GetTagReq, opts ...client.CallOption) (*GetTagsResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetTags", in)
	out := new(GetTagsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) PublishInfo(ctx context.Context, in *PublishInfoReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.PublishInfo", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) EditInfo(ctx context.Context, in *EditInfoReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.EditInfo", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetInfos(ctx context.Context, in *GetInfosReq, opts ...client.CallOption) (*GetInfosResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetInfos", in)
	out := new(GetInfosResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) DeleteInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.DeleteInfo", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) WatchInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.WatchInfo", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) LikeInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.LikeInfo", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) UnLikeInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.UnLikeInfo", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetUserLikes(ctx context.Context, in *UidPageReq, opts ...client.CallOption) (*InfoIdsResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetUserLikes", in)
	out := new(InfoIdsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetUserUnlikes(ctx context.Context, in *UidPageReq, opts ...client.CallOption) (*InfoIdsResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetUserUnlikes", in)
	out := new(InfoIdsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetInfoLiked(ctx context.Context, in *InfoIdPageReq, opts ...client.CallOption) (*UserIdsResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetInfoLiked", in)
	out := new(UserIdsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetInfoUnliked(ctx context.Context, in *InfoIdPageReq, opts ...client.CallOption) (*UserIdsResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetInfoUnliked", in)
	out := new(UserIdsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) FavoriteInfo(ctx context.Context, in *InfoIdReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.FavoriteInfo", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetUserFavorite(ctx context.Context, in *UidPageReq, opts ...client.CallOption) (*InfoIdsResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetUserFavorite", in)
	out := new(InfoIdsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetInfoFavorited(ctx context.Context, in *InfoIdPageReq, opts ...client.CallOption) (*UserIdsResp, error) {
	req := c.c.NewRequest(c.name, "Content.GetInfoFavorited", in)
	out := new(UserIdsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Content service

type ContentHandler interface {
	GetTags(context.Context, *GetTagReq, *GetTagsResp) error
	PublishInfo(context.Context, *PublishInfoReq, *google_protobuf.Empty) error
	EditInfo(context.Context, *EditInfoReq, *google_protobuf.Empty) error
	GetInfos(context.Context, *GetInfosReq, *GetInfosResp) error
	DeleteInfo(context.Context, *InfoIdReq, *google_protobuf.Empty) error
	WatchInfo(context.Context, *InfoIdReq, *google_protobuf.Empty) error
	LikeInfo(context.Context, *InfoIdReq, *google_protobuf.Empty) error
	UnLikeInfo(context.Context, *InfoIdReq, *google_protobuf.Empty) error
	GetUserLikes(context.Context, *UidPageReq, *InfoIdsResp) error
	GetUserUnlikes(context.Context, *UidPageReq, *InfoIdsResp) error
	GetInfoLiked(context.Context, *InfoIdPageReq, *UserIdsResp) error
	GetInfoUnliked(context.Context, *InfoIdPageReq, *UserIdsResp) error
	FavoriteInfo(context.Context, *InfoIdReq, *google_protobuf.Empty) error
	GetUserFavorite(context.Context, *UidPageReq, *InfoIdsResp) error
	GetInfoFavorited(context.Context, *InfoIdPageReq, *UserIdsResp) error
}

func RegisterContentHandler(s server.Server, hdlr ContentHandler, opts ...server.HandlerOption) error {
	type content interface {
		GetTags(ctx context.Context, in *GetTagReq, out *GetTagsResp) error
		PublishInfo(ctx context.Context, in *PublishInfoReq, out *google_protobuf.Empty) error
		EditInfo(ctx context.Context, in *EditInfoReq, out *google_protobuf.Empty) error
		GetInfos(ctx context.Context, in *GetInfosReq, out *GetInfosResp) error
		DeleteInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error
		WatchInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error
		LikeInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error
		UnLikeInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error
		GetUserLikes(ctx context.Context, in *UidPageReq, out *InfoIdsResp) error
		GetUserUnlikes(ctx context.Context, in *UidPageReq, out *InfoIdsResp) error
		GetInfoLiked(ctx context.Context, in *InfoIdPageReq, out *UserIdsResp) error
		GetInfoUnliked(ctx context.Context, in *InfoIdPageReq, out *UserIdsResp) error
		FavoriteInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error
		GetUserFavorite(ctx context.Context, in *UidPageReq, out *InfoIdsResp) error
		GetInfoFavorited(ctx context.Context, in *InfoIdPageReq, out *UserIdsResp) error
	}
	type Content struct {
		content
	}
	h := &contentHandler{hdlr}
	return s.Handle(s.NewHandler(&Content{h}, opts...))
}

type contentHandler struct {
	ContentHandler
}

func (h *contentHandler) GetTags(ctx context.Context, in *GetTagReq, out *GetTagsResp) error {
	return h.ContentHandler.GetTags(ctx, in, out)
}

func (h *contentHandler) PublishInfo(ctx context.Context, in *PublishInfoReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.PublishInfo(ctx, in, out)
}

func (h *contentHandler) EditInfo(ctx context.Context, in *EditInfoReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.EditInfo(ctx, in, out)
}

func (h *contentHandler) GetInfos(ctx context.Context, in *GetInfosReq, out *GetInfosResp) error {
	return h.ContentHandler.GetInfos(ctx, in, out)
}

func (h *contentHandler) DeleteInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.DeleteInfo(ctx, in, out)
}

func (h *contentHandler) WatchInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.WatchInfo(ctx, in, out)
}

func (h *contentHandler) LikeInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.LikeInfo(ctx, in, out)
}

func (h *contentHandler) UnLikeInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.UnLikeInfo(ctx, in, out)
}

func (h *contentHandler) GetUserLikes(ctx context.Context, in *UidPageReq, out *InfoIdsResp) error {
	return h.ContentHandler.GetUserLikes(ctx, in, out)
}

func (h *contentHandler) GetUserUnlikes(ctx context.Context, in *UidPageReq, out *InfoIdsResp) error {
	return h.ContentHandler.GetUserUnlikes(ctx, in, out)
}

func (h *contentHandler) GetInfoLiked(ctx context.Context, in *InfoIdPageReq, out *UserIdsResp) error {
	return h.ContentHandler.GetInfoLiked(ctx, in, out)
}

func (h *contentHandler) GetInfoUnliked(ctx context.Context, in *InfoIdPageReq, out *UserIdsResp) error {
	return h.ContentHandler.GetInfoUnliked(ctx, in, out)
}

func (h *contentHandler) FavoriteInfo(ctx context.Context, in *InfoIdReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.FavoriteInfo(ctx, in, out)
}

func (h *contentHandler) GetUserFavorite(ctx context.Context, in *UidPageReq, out *InfoIdsResp) error {
	return h.ContentHandler.GetUserFavorite(ctx, in, out)
}

func (h *contentHandler) GetInfoFavorited(ctx context.Context, in *InfoIdPageReq, out *UserIdsResp) error {
	return h.ContentHandler.GetInfoFavorited(ctx, in, out)
}
