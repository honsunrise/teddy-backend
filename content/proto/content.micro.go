// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/content.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/content.proto

It has these top-level messages:
	InBoxEntry
	NotifyEntry
	SendEmailReq
	SendInBoxReq
	SendNotifyReq
	SendSMSReq
	GetInBoxReq
	GetNotifyReq
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = google_protobuf.Empty{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Content service

type ContentService interface {
	SendEmail(ctx context.Context, in *SendEmailReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	SendInBox(ctx context.Context, in *SendInBoxReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	SendNotify(ctx context.Context, in *SendNotifyReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	SendSMS(ctx context.Context, in *SendSMSReq, opts ...client.CallOption) (*google_protobuf.Empty, error)
	GetInBox(ctx context.Context, in *GetInBoxReq, opts ...client.CallOption) (Content_GetInBoxService, error)
	GetNotify(ctx context.Context, in *GetNotifyReq, opts ...client.CallOption) (Content_GetNotifyService, error)
}

type contentService struct {
	c    client.Client
	name string
}

func NewContentService(name string, c client.Client) ContentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.teddy.srv.content"
	}
	return &contentService{
		c:    c,
		name: name,
	}
}

func (c *contentService) SendEmail(ctx context.Context, in *SendEmailReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.SendEmail", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) SendInBox(ctx context.Context, in *SendInBoxReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.SendInBox", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) SendNotify(ctx context.Context, in *SendNotifyReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.SendNotify", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) SendSMS(ctx context.Context, in *SendSMSReq, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "Content.SendSMS", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) GetInBox(ctx context.Context, in *GetInBoxReq, opts ...client.CallOption) (Content_GetInBoxService, error) {
	req := c.c.NewRequest(c.name, "Content.GetInBox", &GetInBoxReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &contentServiceGetInBox{stream}, nil
}

type Content_GetInBoxService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*InBoxEntry, error)
}

type contentServiceGetInBox struct {
	stream client.Stream
}

func (x *contentServiceGetInBox) Close() error {
	return x.stream.Close()
}

func (x *contentServiceGetInBox) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *contentServiceGetInBox) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *contentServiceGetInBox) Recv() (*InBoxEntry, error) {
	m := new(InBoxEntry)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentService) GetNotify(ctx context.Context, in *GetNotifyReq, opts ...client.CallOption) (Content_GetNotifyService, error) {
	req := c.c.NewRequest(c.name, "Content.GetNotify", &GetNotifyReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &contentServiceGetNotify{stream}, nil
}

type Content_GetNotifyService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*NotifyEntry, error)
}

type contentServiceGetNotify struct {
	stream client.Stream
}

func (x *contentServiceGetNotify) Close() error {
	return x.stream.Close()
}

func (x *contentServiceGetNotify) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *contentServiceGetNotify) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *contentServiceGetNotify) Recv() (*NotifyEntry, error) {
	m := new(NotifyEntry)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Content service

type ContentHandler interface {
	SendEmail(context.Context, *SendEmailReq, *google_protobuf.Empty) error
	SendInBox(context.Context, *SendInBoxReq, *google_protobuf.Empty) error
	SendNotify(context.Context, *SendNotifyReq, *google_protobuf.Empty) error
	SendSMS(context.Context, *SendSMSReq, *google_protobuf.Empty) error
	GetInBox(context.Context, *GetInBoxReq, Content_GetInBoxStream) error
	GetNotify(context.Context, *GetNotifyReq, Content_GetNotifyStream) error
}

func RegisterContentHandler(s server.Server, hdlr ContentHandler, opts ...server.HandlerOption) error {
	type content interface {
		SendEmail(ctx context.Context, in *SendEmailReq, out *google_protobuf.Empty) error
		SendInBox(ctx context.Context, in *SendInBoxReq, out *google_protobuf.Empty) error
		SendNotify(ctx context.Context, in *SendNotifyReq, out *google_protobuf.Empty) error
		SendSMS(ctx context.Context, in *SendSMSReq, out *google_protobuf.Empty) error
		GetInBox(ctx context.Context, stream server.Stream) error
		GetNotify(ctx context.Context, stream server.Stream) error
	}
	type Content struct {
		content
	}
	h := &contentHandler{hdlr}
	return s.Handle(s.NewHandler(&Content{h}, opts...))
}

type contentHandler struct {
	ContentHandler
}

func (h *contentHandler) SendEmail(ctx context.Context, in *SendEmailReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.SendEmail(ctx, in, out)
}

func (h *contentHandler) SendInBox(ctx context.Context, in *SendInBoxReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.SendInBox(ctx, in, out)
}

func (h *contentHandler) SendNotify(ctx context.Context, in *SendNotifyReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.SendNotify(ctx, in, out)
}

func (h *contentHandler) SendSMS(ctx context.Context, in *SendSMSReq, out *google_protobuf.Empty) error {
	return h.ContentHandler.SendSMS(ctx, in, out)
}

func (h *contentHandler) GetInBox(ctx context.Context, stream server.Stream) error {
	m := new(GetInBoxReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ContentHandler.GetInBox(ctx, m, &contentGetInBoxStream{stream})
}

type Content_GetInBoxStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*InBoxEntry) error
}

type contentGetInBoxStream struct {
	stream server.Stream
}

func (x *contentGetInBoxStream) Close() error {
	return x.stream.Close()
}

func (x *contentGetInBoxStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *contentGetInBoxStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *contentGetInBoxStream) Send(m *InBoxEntry) error {
	return x.stream.Send(m)
}

func (h *contentHandler) GetNotify(ctx context.Context, stream server.Stream) error {
	m := new(GetNotifyReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ContentHandler.GetNotify(ctx, m, &contentGetNotifyStream{stream})
}

type Content_GetNotifyStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*NotifyEntry) error
}

type contentGetNotifyStream struct {
	stream server.Stream
}

func (x *contentGetNotifyStream) Close() error {
	return x.stream.Close()
}

func (x *contentGetNotifyStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *contentGetNotifyStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *contentGetNotifyStream) Send(m *NotifyEntry) error {
	return x.stream.Send(m)
}
