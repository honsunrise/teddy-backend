// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/captcha.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/captcha.proto

It has these top-level messages:
	GetCaptchaIdReq
	GetCaptchaIdResp
	GetImageDataReq
	GetImageDataResp
	GetVoiceDataReq
	GetVoiceDataResp
	GetRandomReq
	GetRandomResp
	VerifyReq
	VerifyResp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Captcha service

type CaptchaService interface {
	GetCaptchaId(ctx context.Context, in *GetCaptchaIdReq, opts ...client.CallOption) (*GetCaptchaIdResp, error)
	GetImageData(ctx context.Context, in *GetImageDataReq, opts ...client.CallOption) (*GetImageDataResp, error)
	GetVoiceData(ctx context.Context, in *GetVoiceDataReq, opts ...client.CallOption) (*GetVoiceDataResp, error)
	GetRandomById(ctx context.Context, in *GetRandomReq, opts ...client.CallOption) (*GetRandomResp, error)
	Verify(ctx context.Context, in *VerifyReq, opts ...client.CallOption) (*VerifyResp, error)
}

type captchaService struct {
	c    client.Client
	name string
}

func NewCaptchaService(name string, c client.Client) CaptchaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.teddy.srv.content"
	}
	return &captchaService{
		c:    c,
		name: name,
	}
}

func (c *captchaService) GetCaptchaId(ctx context.Context, in *GetCaptchaIdReq, opts ...client.CallOption) (*GetCaptchaIdResp, error) {
	req := c.c.NewRequest(c.name, "Captcha.GetCaptchaId", in)
	out := new(GetCaptchaIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaService) GetImageData(ctx context.Context, in *GetImageDataReq, opts ...client.CallOption) (*GetImageDataResp, error) {
	req := c.c.NewRequest(c.name, "Captcha.GetImageData", in)
	out := new(GetImageDataResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaService) GetVoiceData(ctx context.Context, in *GetVoiceDataReq, opts ...client.CallOption) (*GetVoiceDataResp, error) {
	req := c.c.NewRequest(c.name, "Captcha.GetVoiceData", in)
	out := new(GetVoiceDataResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaService) GetRandomById(ctx context.Context, in *GetRandomReq, opts ...client.CallOption) (*GetRandomResp, error) {
	req := c.c.NewRequest(c.name, "Captcha.GetRandomById", in)
	out := new(GetRandomResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaService) Verify(ctx context.Context, in *VerifyReq, opts ...client.CallOption) (*VerifyResp, error) {
	req := c.c.NewRequest(c.name, "Captcha.Verify", in)
	out := new(VerifyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Captcha service

type CaptchaHandler interface {
	GetCaptchaId(context.Context, *GetCaptchaIdReq, *GetCaptchaIdResp) error
	GetImageData(context.Context, *GetImageDataReq, *GetImageDataResp) error
	GetVoiceData(context.Context, *GetVoiceDataReq, *GetVoiceDataResp) error
	GetRandomById(context.Context, *GetRandomReq, *GetRandomResp) error
	Verify(context.Context, *VerifyReq, *VerifyResp) error
}

func RegisterCaptchaHandler(s server.Server, hdlr CaptchaHandler, opts ...server.HandlerOption) error {
	type captcha interface {
		GetCaptchaId(ctx context.Context, in *GetCaptchaIdReq, out *GetCaptchaIdResp) error
		GetImageData(ctx context.Context, in *GetImageDataReq, out *GetImageDataResp) error
		GetVoiceData(ctx context.Context, in *GetVoiceDataReq, out *GetVoiceDataResp) error
		GetRandomById(ctx context.Context, in *GetRandomReq, out *GetRandomResp) error
		Verify(ctx context.Context, in *VerifyReq, out *VerifyResp) error
	}
	type Captcha struct {
		captcha
	}
	h := &captchaHandler{hdlr}
	return s.Handle(s.NewHandler(&Captcha{h}, opts...))
}

type captchaHandler struct {
	CaptchaHandler
}

func (h *captchaHandler) GetCaptchaId(ctx context.Context, in *GetCaptchaIdReq, out *GetCaptchaIdResp) error {
	return h.CaptchaHandler.GetCaptchaId(ctx, in, out)
}

func (h *captchaHandler) GetImageData(ctx context.Context, in *GetImageDataReq, out *GetImageDataResp) error {
	return h.CaptchaHandler.GetImageData(ctx, in, out)
}

func (h *captchaHandler) GetVoiceData(ctx context.Context, in *GetVoiceDataReq, out *GetVoiceDataResp) error {
	return h.CaptchaHandler.GetVoiceData(ctx, in, out)
}

func (h *captchaHandler) GetRandomById(ctx context.Context, in *GetRandomReq, out *GetRandomResp) error {
	return h.CaptchaHandler.GetRandomById(ctx, in, out)
}

func (h *captchaHandler) Verify(ctx context.Context, in *VerifyReq, out *VerifyResp) error {
	return h.CaptchaHandler.Verify(ctx, in, out)
}
