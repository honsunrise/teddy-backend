// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/notify.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/notify.proto

It has these top-level messages:
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Notify service

type NotifyService interface {
	GetInbox(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type notifyService struct {
	c    client.Client
	name string
}

func NewNotifyService(name string, c client.Client) NotifyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.teddy.api.uaa"
	}
	return &notifyService{
		c:    c,
		name: name,
	}
}

func (c *notifyService) GetInbox(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Notify.GetInbox", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notify service

type NotifyHandler interface {
	GetInbox(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterNotifyHandler(s server.Server, hdlr NotifyHandler, opts ...server.HandlerOption) error {
	type notify interface {
		GetInbox(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Notify struct {
		notify
	}
	h := &notifyHandler{hdlr}
	return s.Handle(s.NewHandler(&Notify{h}, opts...))
}

type notifyHandler struct {
	NotifyHandler
}

func (h *notifyHandler) GetInbox(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NotifyHandler.GetInbox(ctx, in, out)
}
