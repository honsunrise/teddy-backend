// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/zhsyourai/teddy-backend/common/proto/content/content.proto

package content

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sort struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Asc                  bool     `protobuf:"varint,2,opt,name=asc,proto3" json:"asc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sort) Reset()         { *m = Sort{} }
func (m *Sort) String() string { return proto.CompactTextString(m) }
func (*Sort) ProtoMessage()    {}
func (*Sort) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{0}
}
func (m *Sort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sort.Unmarshal(m, b)
}
func (m *Sort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sort.Marshal(b, m, deterministic)
}
func (dst *Sort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sort.Merge(dst, src)
}
func (m *Sort) XXX_Size() int {
	return xxx_messageInfo_Sort.Size(m)
}
func (m *Sort) XXX_DiscardUnknown() {
	xxx_messageInfo_Sort.DiscardUnknown(m)
}

var xxx_messageInfo_Sort proto.InternalMessageInfo

func (m *Sort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sort) GetAsc() bool {
	if m != nil {
		return m.Asc
	}
	return false
}

type Tag struct {
	Tag                  string               `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type                 string               `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Usage                uint64               `protobuf:"varint,3,opt,name=usage,proto3" json:"usage,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LastUseTime          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=lastUseTime,proto3" json:"lastUseTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{1}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Tag) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Tag) GetUsage() uint64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *Tag) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Tag) GetLastUseTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUseTime
	}
	return nil
}

type TagAndType struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagAndType) Reset()         { *m = TagAndType{} }
func (m *TagAndType) String() string { return proto.CompactTextString(m) }
func (*TagAndType) ProtoMessage()    {}
func (*TagAndType) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{2}
}
func (m *TagAndType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagAndType.Unmarshal(m, b)
}
func (m *TagAndType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagAndType.Marshal(b, m, deterministic)
}
func (dst *TagAndType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagAndType.Merge(dst, src)
}
func (m *TagAndType) XXX_Size() int {
	return xxx_messageInfo_TagAndType.Size(m)
}
func (m *TagAndType) XXX_DiscardUnknown() {
	xxx_messageInfo_TagAndType.DiscardUnknown(m)
}

var xxx_messageInfo_TagAndType proto.InternalMessageInfo

func (m *TagAndType) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TagAndType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Info struct {
	InfoID               string               `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	Uid                  string               `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Author               string               `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Title                string               `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Summary              string               `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Country              string               `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	ContentTime          *timestamp.Timestamp `protobuf:"bytes,7,opt,name=contentTime,proto3" json:"contentTime,omitempty"`
	CoverResources       map[string]string    `protobuf:"bytes,8,rep,name=coverResources,proto3" json:"coverResources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PublishTime          *timestamp.Timestamp `protobuf:"bytes,9,opt,name=publishTime,proto3" json:"publishTime,omitempty"`
	LastReviewTime       *timestamp.Timestamp `protobuf:"bytes,10,opt,name=lastReviewTime,proto3" json:"lastReviewTime,omitempty"`
	WatchCount           uint64               `protobuf:"varint,11,opt,name=watchCount,proto3" json:"watchCount,omitempty"`
	Tags                 []*TagAndType        `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	ThumbUps             uint64               `protobuf:"varint,13,opt,name=thumbUps,proto3" json:"thumbUps,omitempty"`
	IsThumbUp            bool                 `protobuf:"varint,14,opt,name=isThumbUp,proto3" json:"isThumbUp,omitempty"`
	ThumbUpList          []string             `protobuf:"bytes,15,rep,name=thumbUpList,proto3" json:"thumbUpList,omitempty"`
	ThumbDowns           uint64               `protobuf:"varint,16,opt,name=thumbDowns,proto3" json:"thumbDowns,omitempty"`
	IsThumbDown          bool                 `protobuf:"varint,17,opt,name=isThumbDown,proto3" json:"isThumbDown,omitempty"`
	ThumbDownList        []string             `protobuf:"bytes,18,rep,name=thumbDownList,proto3" json:"thumbDownList,omitempty"`
	Favorites            uint64               `protobuf:"varint,19,opt,name=favorites,proto3" json:"favorites,omitempty"`
	IsFavorite           bool                 `protobuf:"varint,20,opt,name=isFavorite,proto3" json:"isFavorite,omitempty"`
	FavoriteList         []string             `protobuf:"bytes,21,rep,name=favoriteList,proto3" json:"favoriteList,omitempty"`
	LastModifyTime       *timestamp.Timestamp `protobuf:"bytes,22,opt,name=lastModifyTime,proto3" json:"lastModifyTime,omitempty"`
	CanReview            bool                 `protobuf:"varint,23,opt,name=canReview,proto3" json:"canReview,omitempty"`
	Valid                bool                 `protobuf:"varint,24,opt,name=valid,proto3" json:"valid,omitempty"`
	Archived             bool                 `protobuf:"varint,25,opt,name=archived,proto3" json:"archived,omitempty"`
	LatestSegmentID      string               `protobuf:"bytes,26,opt,name=LatestSegmentID,proto3" json:"LatestSegmentID,omitempty"`
	SegmentCount         uint64               `protobuf:"varint,27,opt,name=SegmentCount,proto3" json:"SegmentCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{3}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Info.Unmarshal(m, b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Info.Marshal(b, m, deterministic)
}
func (dst *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(dst, src)
}
func (m *Info) XXX_Size() int {
	return xxx_messageInfo_Info.Size(m)
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *Info) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Info) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Info) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Info) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Info) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Info) GetContentTime() *timestamp.Timestamp {
	if m != nil {
		return m.ContentTime
	}
	return nil
}

func (m *Info) GetCoverResources() map[string]string {
	if m != nil {
		return m.CoverResources
	}
	return nil
}

func (m *Info) GetPublishTime() *timestamp.Timestamp {
	if m != nil {
		return m.PublishTime
	}
	return nil
}

func (m *Info) GetLastReviewTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastReviewTime
	}
	return nil
}

func (m *Info) GetWatchCount() uint64 {
	if m != nil {
		return m.WatchCount
	}
	return 0
}

func (m *Info) GetTags() []*TagAndType {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Info) GetThumbUps() uint64 {
	if m != nil {
		return m.ThumbUps
	}
	return 0
}

func (m *Info) GetIsThumbUp() bool {
	if m != nil {
		return m.IsThumbUp
	}
	return false
}

func (m *Info) GetThumbUpList() []string {
	if m != nil {
		return m.ThumbUpList
	}
	return nil
}

func (m *Info) GetThumbDowns() uint64 {
	if m != nil {
		return m.ThumbDowns
	}
	return 0
}

func (m *Info) GetIsThumbDown() bool {
	if m != nil {
		return m.IsThumbDown
	}
	return false
}

func (m *Info) GetThumbDownList() []string {
	if m != nil {
		return m.ThumbDownList
	}
	return nil
}

func (m *Info) GetFavorites() uint64 {
	if m != nil {
		return m.Favorites
	}
	return 0
}

func (m *Info) GetIsFavorite() bool {
	if m != nil {
		return m.IsFavorite
	}
	return false
}

func (m *Info) GetFavoriteList() []string {
	if m != nil {
		return m.FavoriteList
	}
	return nil
}

func (m *Info) GetLastModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastModifyTime
	}
	return nil
}

func (m *Info) GetCanReview() bool {
	if m != nil {
		return m.CanReview
	}
	return false
}

func (m *Info) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Info) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Info) GetLatestSegmentID() string {
	if m != nil {
		return m.LatestSegmentID
	}
	return ""
}

func (m *Info) GetSegmentCount() uint64 {
	if m != nil {
		return m.SegmentCount
	}
	return 0
}

type Segment struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InfoID               string            `protobuf:"bytes,2,opt,name=infoID,proto3" json:"infoID,omitempty"`
	No                   uint64            `protobuf:"varint,3,opt,name=no,proto3" json:"no,omitempty"`
	Title                string            `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Labels               []string          `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Content              map[string]string `protobuf:"bytes,6,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Segment) Reset()         { *m = Segment{} }
func (m *Segment) String() string { return proto.CompactTextString(m) }
func (*Segment) ProtoMessage()    {}
func (*Segment) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{4}
}
func (m *Segment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Segment.Unmarshal(m, b)
}
func (m *Segment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Segment.Marshal(b, m, deterministic)
}
func (dst *Segment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segment.Merge(dst, src)
}
func (m *Segment) XXX_Size() int {
	return xxx_messageInfo_Segment.Size(m)
}
func (m *Segment) XXX_DiscardUnknown() {
	xxx_messageInfo_Segment.DiscardUnknown(m)
}

var xxx_messageInfo_Segment proto.InternalMessageInfo

func (m *Segment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Segment) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *Segment) GetNo() uint64 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *Segment) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Segment) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Segment) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

type GetTagReq struct {
	Page                 uint32   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Sorts                []*Sort  `protobuf:"bytes,4,rep,name=sorts,proto3" json:"sorts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTagReq) Reset()         { *m = GetTagReq{} }
func (m *GetTagReq) String() string { return proto.CompactTextString(m) }
func (*GetTagReq) ProtoMessage()    {}
func (*GetTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{5}
}
func (m *GetTagReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTagReq.Unmarshal(m, b)
}
func (m *GetTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTagReq.Marshal(b, m, deterministic)
}
func (dst *GetTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagReq.Merge(dst, src)
}
func (m *GetTagReq) XXX_Size() int {
	return xxx_messageInfo_GetTagReq.Size(m)
}
func (m *GetTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagReq proto.InternalMessageInfo

func (m *GetTagReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetTagReq) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetTagReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetTagReq) GetSorts() []*Sort {
	if m != nil {
		return m.Sorts
	}
	return nil
}

type UIDPageReq struct {
	Page                 uint32   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sorts                []*Sort  `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	Uid                  string   `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UIDPageReq) Reset()         { *m = UIDPageReq{} }
func (m *UIDPageReq) String() string { return proto.CompactTextString(m) }
func (*UIDPageReq) ProtoMessage()    {}
func (*UIDPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{6}
}
func (m *UIDPageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UIDPageReq.Unmarshal(m, b)
}
func (m *UIDPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UIDPageReq.Marshal(b, m, deterministic)
}
func (dst *UIDPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UIDPageReq.Merge(dst, src)
}
func (m *UIDPageReq) XXX_Size() int {
	return xxx_messageInfo_UIDPageReq.Size(m)
}
func (m *UIDPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UIDPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_UIDPageReq proto.InternalMessageInfo

func (m *UIDPageReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *UIDPageReq) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UIDPageReq) GetSorts() []*Sort {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *UIDPageReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type GetTagsResp struct {
	TotalCount           uint64   `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Tags                 []*Tag   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTagsResp) Reset()         { *m = GetTagsResp{} }
func (m *GetTagsResp) String() string { return proto.CompactTextString(m) }
func (*GetTagsResp) ProtoMessage()    {}
func (*GetTagsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{7}
}
func (m *GetTagsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTagsResp.Unmarshal(m, b)
}
func (m *GetTagsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTagsResp.Marshal(b, m, deterministic)
}
func (dst *GetTagsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTagsResp.Merge(dst, src)
}
func (m *GetTagsResp) XXX_Size() int {
	return xxx_messageInfo_GetTagsResp.Size(m)
}
func (m *GetTagsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTagsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTagsResp proto.InternalMessageInfo

func (m *GetTagsResp) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetTagsResp) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type InfoOneReq struct {
	InfoID               string   `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoOneReq) Reset()         { *m = InfoOneReq{} }
func (m *InfoOneReq) String() string { return proto.CompactTextString(m) }
func (*InfoOneReq) ProtoMessage()    {}
func (*InfoOneReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{8}
}
func (m *InfoOneReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoOneReq.Unmarshal(m, b)
}
func (m *InfoOneReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoOneReq.Marshal(b, m, deterministic)
}
func (dst *InfoOneReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoOneReq.Merge(dst, src)
}
func (m *InfoOneReq) XXX_Size() int {
	return xxx_messageInfo_InfoOneReq.Size(m)
}
func (m *InfoOneReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoOneReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoOneReq proto.InternalMessageInfo

func (m *InfoOneReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

type PublishInfoReq struct {
	Uid                  string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Author               string            `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Title                string            `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Summary              string            `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Country              string            `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Tags                 []*TagAndType     `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	CoverResources       map[string]string `protobuf:"bytes,7,rep,name=coverResources,proto3" json:"coverResources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CanReview            bool              `protobuf:"varint,8,opt,name=canReview,proto3" json:"canReview,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishInfoReq) Reset()         { *m = PublishInfoReq{} }
func (m *PublishInfoReq) String() string { return proto.CompactTextString(m) }
func (*PublishInfoReq) ProtoMessage()    {}
func (*PublishInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{9}
}
func (m *PublishInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishInfoReq.Unmarshal(m, b)
}
func (m *PublishInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishInfoReq.Marshal(b, m, deterministic)
}
func (dst *PublishInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishInfoReq.Merge(dst, src)
}
func (m *PublishInfoReq) XXX_Size() int {
	return xxx_messageInfo_PublishInfoReq.Size(m)
}
func (m *PublishInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishInfoReq proto.InternalMessageInfo

func (m *PublishInfoReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PublishInfoReq) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *PublishInfoReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PublishInfoReq) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *PublishInfoReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PublishInfoReq) GetTags() []*TagAndType {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PublishInfoReq) GetCoverResources() map[string]string {
	if m != nil {
		return m.CoverResources
	}
	return nil
}

func (m *PublishInfoReq) GetCanReview() bool {
	if m != nil {
		return m.CanReview
	}
	return false
}

type EditInfoReq struct {
	InfoID               string            `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	Uid                  string            `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Author               string            `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Title                string            `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Summary              string            `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Country              string            `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Tags                 []*TagAndType     `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	CoverResources       map[string]string `protobuf:"bytes,8,rep,name=coverResources,proto3" json:"coverResources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CanReview            bool              `protobuf:"varint,9,opt,name=canReview,proto3" json:"canReview,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EditInfoReq) Reset()         { *m = EditInfoReq{} }
func (m *EditInfoReq) String() string { return proto.CompactTextString(m) }
func (*EditInfoReq) ProtoMessage()    {}
func (*EditInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{10}
}
func (m *EditInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditInfoReq.Unmarshal(m, b)
}
func (m *EditInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditInfoReq.Marshal(b, m, deterministic)
}
func (dst *EditInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditInfoReq.Merge(dst, src)
}
func (m *EditInfoReq) XXX_Size() int {
	return xxx_messageInfo_EditInfoReq.Size(m)
}
func (m *EditInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EditInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_EditInfoReq proto.InternalMessageInfo

func (m *EditInfoReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *EditInfoReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *EditInfoReq) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *EditInfoReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EditInfoReq) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *EditInfoReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *EditInfoReq) GetTags() []*TagAndType {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EditInfoReq) GetCoverResources() map[string]string {
	if m != nil {
		return m.CoverResources
	}
	return nil
}

func (m *EditInfoReq) GetCanReview() bool {
	if m != nil {
		return m.CanReview
	}
	return false
}

type GetSegmentsReq struct {
	Page                 uint32   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	InfoID               string   `protobuf:"bytes,3,opt,name=infoID,proto3" json:"infoID,omitempty"`
	Labels               []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Sorts                []*Sort  `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSegmentsReq) Reset()         { *m = GetSegmentsReq{} }
func (m *GetSegmentsReq) String() string { return proto.CompactTextString(m) }
func (*GetSegmentsReq) ProtoMessage()    {}
func (*GetSegmentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{11}
}
func (m *GetSegmentsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSegmentsReq.Unmarshal(m, b)
}
func (m *GetSegmentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSegmentsReq.Marshal(b, m, deterministic)
}
func (dst *GetSegmentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSegmentsReq.Merge(dst, src)
}
func (m *GetSegmentsReq) XXX_Size() int {
	return xxx_messageInfo_GetSegmentsReq.Size(m)
}
func (m *GetSegmentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSegmentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSegmentsReq proto.InternalMessageInfo

func (m *GetSegmentsReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetSegmentsReq) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetSegmentsReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *GetSegmentsReq) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *GetSegmentsReq) GetSorts() []*Sort {
	if m != nil {
		return m.Sorts
	}
	return nil
}

type Segments struct {
	TotalCount           uint64     `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Segments             []*Segment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Segments) Reset()         { *m = Segments{} }
func (m *Segments) String() string { return proto.CompactTextString(m) }
func (*Segments) ProtoMessage()    {}
func (*Segments) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{12}
}
func (m *Segments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Segments.Unmarshal(m, b)
}
func (m *Segments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Segments.Marshal(b, m, deterministic)
}
func (dst *Segments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segments.Merge(dst, src)
}
func (m *Segments) XXX_Size() int {
	return xxx_messageInfo_Segments.Size(m)
}
func (m *Segments) XXX_DiscardUnknown() {
	xxx_messageInfo_Segments.DiscardUnknown(m)
}

var xxx_messageInfo_Segments proto.InternalMessageInfo

func (m *Segments) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *Segments) GetSegments() []*Segment {
	if m != nil {
		return m.Segments
	}
	return nil
}

type PublishSegmentReq struct {
	InfoID               string            `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	No                   int64             `protobuf:"varint,2,opt,name=no,proto3" json:"no,omitempty"`
	Title                string            `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Labels               []string          `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Content              map[string]string `protobuf:"bytes,5,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishSegmentReq) Reset()         { *m = PublishSegmentReq{} }
func (m *PublishSegmentReq) String() string { return proto.CompactTextString(m) }
func (*PublishSegmentReq) ProtoMessage()    {}
func (*PublishSegmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{13}
}
func (m *PublishSegmentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishSegmentReq.Unmarshal(m, b)
}
func (m *PublishSegmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishSegmentReq.Marshal(b, m, deterministic)
}
func (dst *PublishSegmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishSegmentReq.Merge(dst, src)
}
func (m *PublishSegmentReq) XXX_Size() int {
	return xxx_messageInfo_PublishSegmentReq.Size(m)
}
func (m *PublishSegmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishSegmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishSegmentReq proto.InternalMessageInfo

func (m *PublishSegmentReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *PublishSegmentReq) GetNo() int64 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *PublishSegmentReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PublishSegmentReq) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PublishSegmentReq) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

type EditSegmentReq struct {
	InfoID               string            `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	SegID                string            `protobuf:"bytes,2,opt,name=segID,proto3" json:"segID,omitempty"`
	No                   int64             `protobuf:"varint,3,opt,name=no,proto3" json:"no,omitempty"`
	Title                string            `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Labels               []string          `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Content              map[string]string `protobuf:"bytes,6,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EditSegmentReq) Reset()         { *m = EditSegmentReq{} }
func (m *EditSegmentReq) String() string { return proto.CompactTextString(m) }
func (*EditSegmentReq) ProtoMessage()    {}
func (*EditSegmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{14}
}
func (m *EditSegmentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditSegmentReq.Unmarshal(m, b)
}
func (m *EditSegmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditSegmentReq.Marshal(b, m, deterministic)
}
func (dst *EditSegmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditSegmentReq.Merge(dst, src)
}
func (m *EditSegmentReq) XXX_Size() int {
	return xxx_messageInfo_EditSegmentReq.Size(m)
}
func (m *EditSegmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EditSegmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_EditSegmentReq proto.InternalMessageInfo

func (m *EditSegmentReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *EditSegmentReq) GetSegID() string {
	if m != nil {
		return m.SegID
	}
	return ""
}

func (m *EditSegmentReq) GetNo() int64 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *EditSegmentReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EditSegmentReq) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *EditSegmentReq) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

type SegmentOneReq struct {
	InfoID               string   `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	SegID                string   `protobuf:"bytes,2,opt,name=segID,proto3" json:"segID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentOneReq) Reset()         { *m = SegmentOneReq{} }
func (m *SegmentOneReq) String() string { return proto.CompactTextString(m) }
func (*SegmentOneReq) ProtoMessage()    {}
func (*SegmentOneReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{15}
}
func (m *SegmentOneReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentOneReq.Unmarshal(m, b)
}
func (m *SegmentOneReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentOneReq.Marshal(b, m, deterministic)
}
func (dst *SegmentOneReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentOneReq.Merge(dst, src)
}
func (m *SegmentOneReq) XXX_Size() int {
	return xxx_messageInfo_SegmentOneReq.Size(m)
}
func (m *SegmentOneReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentOneReq.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentOneReq proto.InternalMessageInfo

func (m *SegmentOneReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *SegmentOneReq) GetSegID() string {
	if m != nil {
		return m.SegID
	}
	return ""
}

type InsertValueReq struct {
	InfoID               string               `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	SegID                string               `protobuf:"bytes,3,opt,name=segID,proto3" json:"segID,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	Value                string               `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InsertValueReq) Reset()         { *m = InsertValueReq{} }
func (m *InsertValueReq) String() string { return proto.CompactTextString(m) }
func (*InsertValueReq) ProtoMessage()    {}
func (*InsertValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{16}
}
func (m *InsertValueReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertValueReq.Unmarshal(m, b)
}
func (m *InsertValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertValueReq.Marshal(b, m, deterministic)
}
func (dst *InsertValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertValueReq.Merge(dst, src)
}
func (m *InsertValueReq) XXX_Size() int {
	return xxx_messageInfo_InsertValueReq.Size(m)
}
func (m *InsertValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_InsertValueReq proto.InternalMessageInfo

func (m *InsertValueReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *InsertValueReq) GetSegID() string {
	if m != nil {
		return m.SegID
	}
	return ""
}

func (m *InsertValueReq) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *InsertValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EditValueReq struct {
	InfoID               string               `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	SegID                string               `protobuf:"bytes,3,opt,name=segID,proto3" json:"segID,omitempty"`
	ContID               string               `protobuf:"bytes,4,opt,name=contID,proto3" json:"contID,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Value                string               `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EditValueReq) Reset()         { *m = EditValueReq{} }
func (m *EditValueReq) String() string { return proto.CompactTextString(m) }
func (*EditValueReq) ProtoMessage()    {}
func (*EditValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{17}
}
func (m *EditValueReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditValueReq.Unmarshal(m, b)
}
func (m *EditValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditValueReq.Marshal(b, m, deterministic)
}
func (dst *EditValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditValueReq.Merge(dst, src)
}
func (m *EditValueReq) XXX_Size() int {
	return xxx_messageInfo_EditValueReq.Size(m)
}
func (m *EditValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EditValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_EditValueReq proto.InternalMessageInfo

func (m *EditValueReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *EditValueReq) GetSegID() string {
	if m != nil {
		return m.SegID
	}
	return ""
}

func (m *EditValueReq) GetContID() string {
	if m != nil {
		return m.ContID
	}
	return ""
}

func (m *EditValueReq) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *EditValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ValueOneReq struct {
	InfoID               string   `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	SegID                string   `protobuf:"bytes,3,opt,name=segID,proto3" json:"segID,omitempty"`
	ContID               string   `protobuf:"bytes,4,opt,name=contID,proto3" json:"contID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValueOneReq) Reset()         { *m = ValueOneReq{} }
func (m *ValueOneReq) String() string { return proto.CompactTextString(m) }
func (*ValueOneReq) ProtoMessage()    {}
func (*ValueOneReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{18}
}
func (m *ValueOneReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValueOneReq.Unmarshal(m, b)
}
func (m *ValueOneReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValueOneReq.Marshal(b, m, deterministic)
}
func (dst *ValueOneReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOneReq.Merge(dst, src)
}
func (m *ValueOneReq) XXX_Size() int {
	return xxx_messageInfo_ValueOneReq.Size(m)
}
func (m *ValueOneReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOneReq.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOneReq proto.InternalMessageInfo

func (m *ValueOneReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *ValueOneReq) GetSegID() string {
	if m != nil {
		return m.SegID
	}
	return ""
}

func (m *ValueOneReq) GetContID() string {
	if m != nil {
		return m.ContID
	}
	return ""
}

type GetInfoReq struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	InfoID               string   `protobuf:"bytes,2,opt,name=infoID,proto3" json:"infoID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoReq) Reset()         { *m = GetInfoReq{} }
func (m *GetInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetInfoReq) ProtoMessage()    {}
func (*GetInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{19}
}
func (m *GetInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoReq.Unmarshal(m, b)
}
func (m *GetInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoReq.Marshal(b, m, deterministic)
}
func (dst *GetInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoReq.Merge(dst, src)
}
func (m *GetInfoReq) XXX_Size() int {
	return xxx_messageInfo_GetInfoReq.Size(m)
}
func (m *GetInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoReq proto.InternalMessageInfo

func (m *GetInfoReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *GetInfoReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

type GetInfosReq struct {
	Uid                  string        `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page                 uint32        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size                 uint32        `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Sorts                []*Sort       `protobuf:"bytes,4,rep,name=sorts,proto3" json:"sorts,omitempty"`
	Title                string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Tags                 []*TagAndType `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetInfosReq) Reset()         { *m = GetInfosReq{} }
func (m *GetInfosReq) String() string { return proto.CompactTextString(m) }
func (*GetInfosReq) ProtoMessage()    {}
func (*GetInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{20}
}
func (m *GetInfosReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfosReq.Unmarshal(m, b)
}
func (m *GetInfosReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfosReq.Marshal(b, m, deterministic)
}
func (dst *GetInfosReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfosReq.Merge(dst, src)
}
func (m *GetInfosReq) XXX_Size() int {
	return xxx_messageInfo_GetInfosReq.Size(m)
}
func (m *GetInfosReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfosReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfosReq proto.InternalMessageInfo

func (m *GetInfosReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *GetInfosReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetInfosReq) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetInfosReq) GetSorts() []*Sort {
	if m != nil {
		return m.Sorts
	}
	return nil
}

func (m *GetInfosReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetInfosReq) GetTags() []*TagAndType {
	if m != nil {
		return m.Tags
	}
	return nil
}

type GetInfosResp struct {
	TotalCount           uint64   `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Infos                []*Info  `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfosResp) Reset()         { *m = GetInfosResp{} }
func (m *GetInfosResp) String() string { return proto.CompactTextString(m) }
func (*GetInfosResp) ProtoMessage()    {}
func (*GetInfosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{21}
}
func (m *GetInfosResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfosResp.Unmarshal(m, b)
}
func (m *GetInfosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfosResp.Marshal(b, m, deterministic)
}
func (dst *GetInfosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfosResp.Merge(dst, src)
}
func (m *GetInfosResp) XXX_Size() int {
	return xxx_messageInfo_GetInfosResp.Size(m)
}
func (m *GetInfosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfosResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfosResp proto.InternalMessageInfo

func (m *GetInfosResp) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetInfosResp) GetInfos() []*Info {
	if m != nil {
		return m.Infos
	}
	return nil
}

type InfoIDWithUIDReq struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	InfoID               string   `protobuf:"bytes,2,opt,name=infoID,proto3" json:"infoID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoIDWithUIDReq) Reset()         { *m = InfoIDWithUIDReq{} }
func (m *InfoIDWithUIDReq) String() string { return proto.CompactTextString(m) }
func (*InfoIDWithUIDReq) ProtoMessage()    {}
func (*InfoIDWithUIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{22}
}
func (m *InfoIDWithUIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoIDWithUIDReq.Unmarshal(m, b)
}
func (m *InfoIDWithUIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoIDWithUIDReq.Marshal(b, m, deterministic)
}
func (dst *InfoIDWithUIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoIDWithUIDReq.Merge(dst, src)
}
func (m *InfoIDWithUIDReq) XXX_Size() int {
	return xxx_messageInfo_InfoIDWithUIDReq.Size(m)
}
func (m *InfoIDWithUIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoIDWithUIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoIDWithUIDReq proto.InternalMessageInfo

func (m *InfoIDWithUIDReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *InfoIDWithUIDReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

type InfoIDPageReq struct {
	InfoID               string   `protobuf:"bytes,1,opt,name=infoID,proto3" json:"infoID,omitempty"`
	Page                 uint32   `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size                 uint32   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Sorts                []*Sort  `protobuf:"bytes,4,rep,name=sorts,proto3" json:"sorts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoIDPageReq) Reset()         { *m = InfoIDPageReq{} }
func (m *InfoIDPageReq) String() string { return proto.CompactTextString(m) }
func (*InfoIDPageReq) ProtoMessage()    {}
func (*InfoIDPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{23}
}
func (m *InfoIDPageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoIDPageReq.Unmarshal(m, b)
}
func (m *InfoIDPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoIDPageReq.Marshal(b, m, deterministic)
}
func (dst *InfoIDPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoIDPageReq.Merge(dst, src)
}
func (m *InfoIDPageReq) XXX_Size() int {
	return xxx_messageInfo_InfoIDPageReq.Size(m)
}
func (m *InfoIDPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoIDPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoIDPageReq proto.InternalMessageInfo

func (m *InfoIDPageReq) GetInfoID() string {
	if m != nil {
		return m.InfoID
	}
	return ""
}

func (m *InfoIDPageReq) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *InfoIDPageReq) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *InfoIDPageReq) GetSorts() []*Sort {
	if m != nil {
		return m.Sorts
	}
	return nil
}

type UIDWithTime struct {
	Uid                  string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UIDWithTime) Reset()         { *m = UIDWithTime{} }
func (m *UIDWithTime) String() string { return proto.CompactTextString(m) }
func (*UIDWithTime) ProtoMessage()    {}
func (*UIDWithTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{24}
}
func (m *UIDWithTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UIDWithTime.Unmarshal(m, b)
}
func (m *UIDWithTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UIDWithTime.Marshal(b, m, deterministic)
}
func (dst *UIDWithTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UIDWithTime.Merge(dst, src)
}
func (m *UIDWithTime) XXX_Size() int {
	return xxx_messageInfo_UIDWithTime.Size(m)
}
func (m *UIDWithTime) XXX_DiscardUnknown() {
	xxx_messageInfo_UIDWithTime.DiscardUnknown(m)
}

var xxx_messageInfo_UIDWithTime proto.InternalMessageInfo

func (m *UIDWithTime) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UIDWithTime) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type UserIDsResp struct {
	Items                []*UIDWithTime `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserIDsResp) Reset()         { *m = UserIDsResp{} }
func (m *UserIDsResp) String() string { return proto.CompactTextString(m) }
func (*UserIDsResp) ProtoMessage()    {}
func (*UserIDsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{25}
}
func (m *UserIDsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserIDsResp.Unmarshal(m, b)
}
func (m *UserIDsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserIDsResp.Marshal(b, m, deterministic)
}
func (dst *UserIDsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIDsResp.Merge(dst, src)
}
func (m *UserIDsResp) XXX_Size() int {
	return xxx_messageInfo_UserIDsResp.Size(m)
}
func (m *UserIDsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIDsResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserIDsResp proto.InternalMessageInfo

func (m *UserIDsResp) GetItems() []*UIDWithTime {
	if m != nil {
		return m.Items
	}
	return nil
}

type InfoIDWithTime struct {
	InfoId               string               `protobuf:"bytes,1,opt,name=infoId,proto3" json:"infoId,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InfoIDWithTime) Reset()         { *m = InfoIDWithTime{} }
func (m *InfoIDWithTime) String() string { return proto.CompactTextString(m) }
func (*InfoIDWithTime) ProtoMessage()    {}
func (*InfoIDWithTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{26}
}
func (m *InfoIDWithTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoIDWithTime.Unmarshal(m, b)
}
func (m *InfoIDWithTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoIDWithTime.Marshal(b, m, deterministic)
}
func (dst *InfoIDWithTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoIDWithTime.Merge(dst, src)
}
func (m *InfoIDWithTime) XXX_Size() int {
	return xxx_messageInfo_InfoIDWithTime.Size(m)
}
func (m *InfoIDWithTime) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoIDWithTime.DiscardUnknown(m)
}

var xxx_messageInfo_InfoIDWithTime proto.InternalMessageInfo

func (m *InfoIDWithTime) GetInfoId() string {
	if m != nil {
		return m.InfoId
	}
	return ""
}

func (m *InfoIDWithTime) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type InfoIDsResp struct {
	Items                []*InfoIDWithTime `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *InfoIDsResp) Reset()         { *m = InfoIDsResp{} }
func (m *InfoIDsResp) String() string { return proto.CompactTextString(m) }
func (*InfoIDsResp) ProtoMessage()    {}
func (*InfoIDsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_content_8d07e1058f747f98, []int{27}
}
func (m *InfoIDsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoIDsResp.Unmarshal(m, b)
}
func (m *InfoIDsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoIDsResp.Marshal(b, m, deterministic)
}
func (dst *InfoIDsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoIDsResp.Merge(dst, src)
}
func (m *InfoIDsResp) XXX_Size() int {
	return xxx_messageInfo_InfoIDsResp.Size(m)
}
func (m *InfoIDsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoIDsResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoIDsResp proto.InternalMessageInfo

func (m *InfoIDsResp) GetItems() []*InfoIDWithTime {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Sort)(nil), "teddy.srv.content.Sort")
	proto.RegisterType((*Tag)(nil), "teddy.srv.content.Tag")
	proto.RegisterType((*TagAndType)(nil), "teddy.srv.content.TagAndType")
	proto.RegisterType((*Info)(nil), "teddy.srv.content.Info")
	proto.RegisterMapType((map[string]string)(nil), "teddy.srv.content.Info.CoverResourcesEntry")
	proto.RegisterType((*Segment)(nil), "teddy.srv.content.Segment")
	proto.RegisterMapType((map[string]string)(nil), "teddy.srv.content.Segment.ContentEntry")
	proto.RegisterType((*GetTagReq)(nil), "teddy.srv.content.GetTagReq")
	proto.RegisterType((*UIDPageReq)(nil), "teddy.srv.content.UIDPageReq")
	proto.RegisterType((*GetTagsResp)(nil), "teddy.srv.content.GetTagsResp")
	proto.RegisterType((*InfoOneReq)(nil), "teddy.srv.content.InfoOneReq")
	proto.RegisterType((*PublishInfoReq)(nil), "teddy.srv.content.PublishInfoReq")
	proto.RegisterMapType((map[string]string)(nil), "teddy.srv.content.PublishInfoReq.CoverResourcesEntry")
	proto.RegisterType((*EditInfoReq)(nil), "teddy.srv.content.EditInfoReq")
	proto.RegisterMapType((map[string]string)(nil), "teddy.srv.content.EditInfoReq.CoverResourcesEntry")
	proto.RegisterType((*GetSegmentsReq)(nil), "teddy.srv.content.GetSegmentsReq")
	proto.RegisterType((*Segments)(nil), "teddy.srv.content.Segments")
	proto.RegisterType((*PublishSegmentReq)(nil), "teddy.srv.content.PublishSegmentReq")
	proto.RegisterMapType((map[string]string)(nil), "teddy.srv.content.PublishSegmentReq.ContentEntry")
	proto.RegisterType((*EditSegmentReq)(nil), "teddy.srv.content.EditSegmentReq")
	proto.RegisterMapType((map[string]string)(nil), "teddy.srv.content.EditSegmentReq.ContentEntry")
	proto.RegisterType((*SegmentOneReq)(nil), "teddy.srv.content.SegmentOneReq")
	proto.RegisterType((*InsertValueReq)(nil), "teddy.srv.content.InsertValueReq")
	proto.RegisterType((*EditValueReq)(nil), "teddy.srv.content.EditValueReq")
	proto.RegisterType((*ValueOneReq)(nil), "teddy.srv.content.ValueOneReq")
	proto.RegisterType((*GetInfoReq)(nil), "teddy.srv.content.GetInfoReq")
	proto.RegisterType((*GetInfosReq)(nil), "teddy.srv.content.GetInfosReq")
	proto.RegisterType((*GetInfosResp)(nil), "teddy.srv.content.GetInfosResp")
	proto.RegisterType((*InfoIDWithUIDReq)(nil), "teddy.srv.content.InfoIDWithUIDReq")
	proto.RegisterType((*InfoIDPageReq)(nil), "teddy.srv.content.InfoIDPageReq")
	proto.RegisterType((*UIDWithTime)(nil), "teddy.srv.content.UIDWithTime")
	proto.RegisterType((*UserIDsResp)(nil), "teddy.srv.content.UserIDsResp")
	proto.RegisterType((*InfoIDWithTime)(nil), "teddy.srv.content.InfoIDWithTime")
	proto.RegisterType((*InfoIDsResp)(nil), "teddy.srv.content.InfoIDsResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentClient interface {
	GetTags(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagsResp, error)
	PublishInfo(ctx context.Context, in *PublishInfoReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EditInfo(ctx context.Context, in *EditInfoReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*Info, error)
	GetInfos(ctx context.Context, in *GetInfosReq, opts ...grpc.CallOption) (*GetInfosResp, error)
	DeleteInfo(ctx context.Context, in *InfoOneReq, opts ...grpc.CallOption) (*empty.Empty, error)
	WatchInfo(ctx context.Context, in *InfoOneReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSegments(ctx context.Context, in *GetSegmentsReq, opts ...grpc.CallOption) (*Segments, error)
	GetSegment(ctx context.Context, in *SegmentOneReq, opts ...grpc.CallOption) (*Segment, error)
	PublishSegment(ctx context.Context, in *PublishSegmentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EditSegment(ctx context.Context, in *EditSegmentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteSegment(ctx context.Context, in *SegmentOneReq, opts ...grpc.CallOption) (*empty.Empty, error)
	InsertValue(ctx context.Context, in *InsertValueReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EditValue(ctx context.Context, in *EditValueReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteValue(ctx context.Context, in *ValueOneReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ThumbUp(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteThumbUp(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserThumbUp(ctx context.Context, in *UIDPageReq, opts ...grpc.CallOption) (*InfoIDsResp, error)
	GetInfoThumbUp(ctx context.Context, in *InfoIDPageReq, opts ...grpc.CallOption) (*UserIDsResp, error)
	ThumbDown(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteThumbDown(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserThumbDown(ctx context.Context, in *UIDPageReq, opts ...grpc.CallOption) (*InfoIDsResp, error)
	GetInfoThumbDown(ctx context.Context, in *InfoIDPageReq, opts ...grpc.CallOption) (*UserIDsResp, error)
	Favorite(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteFavorite(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserFavorite(ctx context.Context, in *UIDPageReq, opts ...grpc.CallOption) (*InfoIDsResp, error)
	GetInfoFavorite(ctx context.Context, in *InfoIDPageReq, opts ...grpc.CallOption) (*UserIDsResp, error)
}

type contentClient struct {
	cc *grpc.ClientConn
}

func NewContentClient(cc *grpc.ClientConn) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) GetTags(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagsResp, error) {
	out := new(GetTagsResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) PublishInfo(ctx context.Context, in *PublishInfoReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/PublishInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) EditInfo(ctx context.Context, in *EditInfoReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/EditInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetInfos(ctx context.Context, in *GetInfosReq, opts ...grpc.CallOption) (*GetInfosResp, error) {
	out := new(GetInfosResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteInfo(ctx context.Context, in *InfoOneReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/DeleteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) WatchInfo(ctx context.Context, in *InfoOneReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/WatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetSegments(ctx context.Context, in *GetSegmentsReq, opts ...grpc.CallOption) (*Segments, error) {
	out := new(Segments)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetSegment(ctx context.Context, in *SegmentOneReq, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) PublishSegment(ctx context.Context, in *PublishSegmentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/PublishSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) EditSegment(ctx context.Context, in *EditSegmentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/EditSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteSegment(ctx context.Context, in *SegmentOneReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/DeleteSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) InsertValue(ctx context.Context, in *InsertValueReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/InsertValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) EditValue(ctx context.Context, in *EditValueReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/EditValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteValue(ctx context.Context, in *ValueOneReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/DeleteValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ThumbUp(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/ThumbUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteThumbUp(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/DeleteThumbUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetUserThumbUp(ctx context.Context, in *UIDPageReq, opts ...grpc.CallOption) (*InfoIDsResp, error) {
	out := new(InfoIDsResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetUserThumbUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetInfoThumbUp(ctx context.Context, in *InfoIDPageReq, opts ...grpc.CallOption) (*UserIDsResp, error) {
	out := new(UserIDsResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetInfoThumbUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) ThumbDown(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/ThumbDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteThumbDown(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/DeleteThumbDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetUserThumbDown(ctx context.Context, in *UIDPageReq, opts ...grpc.CallOption) (*InfoIDsResp, error) {
	out := new(InfoIDsResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetUserThumbDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetInfoThumbDown(ctx context.Context, in *InfoIDPageReq, opts ...grpc.CallOption) (*UserIDsResp, error) {
	out := new(UserIDsResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetInfoThumbDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) Favorite(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/Favorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteFavorite(ctx context.Context, in *InfoIDWithUIDReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/DeleteFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetUserFavorite(ctx context.Context, in *UIDPageReq, opts ...grpc.CallOption) (*InfoIDsResp, error) {
	out := new(InfoIDsResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetUserFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetInfoFavorite(ctx context.Context, in *InfoIDPageReq, opts ...grpc.CallOption) (*UserIDsResp, error) {
	out := new(UserIDsResp)
	err := c.cc.Invoke(ctx, "/teddy.srv.content.Content/GetInfoFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
type ContentServer interface {
	GetTags(context.Context, *GetTagReq) (*GetTagsResp, error)
	PublishInfo(context.Context, *PublishInfoReq) (*empty.Empty, error)
	EditInfo(context.Context, *EditInfoReq) (*empty.Empty, error)
	GetInfo(context.Context, *GetInfoReq) (*Info, error)
	GetInfos(context.Context, *GetInfosReq) (*GetInfosResp, error)
	DeleteInfo(context.Context, *InfoOneReq) (*empty.Empty, error)
	WatchInfo(context.Context, *InfoOneReq) (*empty.Empty, error)
	GetSegments(context.Context, *GetSegmentsReq) (*Segments, error)
	GetSegment(context.Context, *SegmentOneReq) (*Segment, error)
	PublishSegment(context.Context, *PublishSegmentReq) (*empty.Empty, error)
	EditSegment(context.Context, *EditSegmentReq) (*empty.Empty, error)
	DeleteSegment(context.Context, *SegmentOneReq) (*empty.Empty, error)
	InsertValue(context.Context, *InsertValueReq) (*empty.Empty, error)
	EditValue(context.Context, *EditValueReq) (*empty.Empty, error)
	DeleteValue(context.Context, *ValueOneReq) (*empty.Empty, error)
	ThumbUp(context.Context, *InfoIDWithUIDReq) (*empty.Empty, error)
	DeleteThumbUp(context.Context, *InfoIDWithUIDReq) (*empty.Empty, error)
	GetUserThumbUp(context.Context, *UIDPageReq) (*InfoIDsResp, error)
	GetInfoThumbUp(context.Context, *InfoIDPageReq) (*UserIDsResp, error)
	ThumbDown(context.Context, *InfoIDWithUIDReq) (*empty.Empty, error)
	DeleteThumbDown(context.Context, *InfoIDWithUIDReq) (*empty.Empty, error)
	GetUserThumbDown(context.Context, *UIDPageReq) (*InfoIDsResp, error)
	GetInfoThumbDown(context.Context, *InfoIDPageReq) (*UserIDsResp, error)
	Favorite(context.Context, *InfoIDWithUIDReq) (*empty.Empty, error)
	DeleteFavorite(context.Context, *InfoIDWithUIDReq) (*empty.Empty, error)
	GetUserFavorite(context.Context, *UIDPageReq) (*InfoIDsResp, error)
	GetInfoFavorite(context.Context, *InfoIDPageReq) (*UserIDsResp, error)
}

func RegisterContentServer(s *grpc.Server, srv ContentServer) {
	s.RegisterService(&_Content_serviceDesc, srv)
}

func _Content_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetTags(ctx, req.(*GetTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_PublishInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).PublishInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/PublishInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).PublishInfo(ctx, req.(*PublishInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_EditInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).EditInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/EditInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).EditInfo(ctx, req.(*EditInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetInfos(ctx, req.(*GetInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/DeleteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteInfo(ctx, req.(*InfoOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_WatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).WatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/WatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).WatchInfo(ctx, req.(*InfoOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetSegments(ctx, req.(*GetSegmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetSegment(ctx, req.(*SegmentOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_PublishSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishSegmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).PublishSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/PublishSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).PublishSegment(ctx, req.(*PublishSegmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_EditSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSegmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).EditSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/EditSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).EditSegment(ctx, req.(*EditSegmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteSegment(ctx, req.(*SegmentOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_InsertValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).InsertValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/InsertValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).InsertValue(ctx, req.(*InsertValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_EditValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).EditValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/EditValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).EditValue(ctx, req.(*EditValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/DeleteValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteValue(ctx, req.(*ValueOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ThumbUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDWithUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ThumbUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/ThumbUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ThumbUp(ctx, req.(*InfoIDWithUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteThumbUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDWithUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteThumbUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/DeleteThumbUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteThumbUp(ctx, req.(*InfoIDWithUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetUserThumbUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetUserThumbUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetUserThumbUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetUserThumbUp(ctx, req.(*UIDPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetInfoThumbUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetInfoThumbUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetInfoThumbUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetInfoThumbUp(ctx, req.(*InfoIDPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_ThumbDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDWithUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).ThumbDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/ThumbDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).ThumbDown(ctx, req.(*InfoIDWithUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteThumbDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDWithUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteThumbDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/DeleteThumbDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteThumbDown(ctx, req.(*InfoIDWithUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetUserThumbDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetUserThumbDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetUserThumbDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetUserThumbDown(ctx, req.(*UIDPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetInfoThumbDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetInfoThumbDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetInfoThumbDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetInfoThumbDown(ctx, req.(*InfoIDPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDWithUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/Favorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Favorite(ctx, req.(*InfoIDWithUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDWithUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/DeleteFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteFavorite(ctx, req.(*InfoIDWithUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetUserFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetUserFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetUserFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetUserFavorite(ctx, req.(*UIDPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetInfoFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetInfoFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teddy.srv.content.Content/GetInfoFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetInfoFavorite(ctx, req.(*InfoIDPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Content_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teddy.srv.content.Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTags",
			Handler:    _Content_GetTags_Handler,
		},
		{
			MethodName: "PublishInfo",
			Handler:    _Content_PublishInfo_Handler,
		},
		{
			MethodName: "EditInfo",
			Handler:    _Content_EditInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Content_GetInfo_Handler,
		},
		{
			MethodName: "GetInfos",
			Handler:    _Content_GetInfos_Handler,
		},
		{
			MethodName: "DeleteInfo",
			Handler:    _Content_DeleteInfo_Handler,
		},
		{
			MethodName: "WatchInfo",
			Handler:    _Content_WatchInfo_Handler,
		},
		{
			MethodName: "GetSegments",
			Handler:    _Content_GetSegments_Handler,
		},
		{
			MethodName: "GetSegment",
			Handler:    _Content_GetSegment_Handler,
		},
		{
			MethodName: "PublishSegment",
			Handler:    _Content_PublishSegment_Handler,
		},
		{
			MethodName: "EditSegment",
			Handler:    _Content_EditSegment_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _Content_DeleteSegment_Handler,
		},
		{
			MethodName: "InsertValue",
			Handler:    _Content_InsertValue_Handler,
		},
		{
			MethodName: "EditValue",
			Handler:    _Content_EditValue_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _Content_DeleteValue_Handler,
		},
		{
			MethodName: "ThumbUp",
			Handler:    _Content_ThumbUp_Handler,
		},
		{
			MethodName: "DeleteThumbUp",
			Handler:    _Content_DeleteThumbUp_Handler,
		},
		{
			MethodName: "GetUserThumbUp",
			Handler:    _Content_GetUserThumbUp_Handler,
		},
		{
			MethodName: "GetInfoThumbUp",
			Handler:    _Content_GetInfoThumbUp_Handler,
		},
		{
			MethodName: "ThumbDown",
			Handler:    _Content_ThumbDown_Handler,
		},
		{
			MethodName: "DeleteThumbDown",
			Handler:    _Content_DeleteThumbDown_Handler,
		},
		{
			MethodName: "GetUserThumbDown",
			Handler:    _Content_GetUserThumbDown_Handler,
		},
		{
			MethodName: "GetInfoThumbDown",
			Handler:    _Content_GetInfoThumbDown_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _Content_Favorite_Handler,
		},
		{
			MethodName: "DeleteFavorite",
			Handler:    _Content_DeleteFavorite_Handler,
		},
		{
			MethodName: "GetUserFavorite",
			Handler:    _Content_GetUserFavorite_Handler,
		},
		{
			MethodName: "GetInfoFavorite",
			Handler:    _Content_GetInfoFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/zhsyourai/teddy-backend/common/proto/content/content.proto",
}

func init() {
	proto.RegisterFile("github.com/zhsyourai/teddy-backend/common/proto/content/content.proto", fileDescriptor_content_8d07e1058f747f98)
}

var fileDescriptor_content_8d07e1058f747f98 = []byte{
	// 1741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0x37, 0xf5, 0x5f, 0x23, 0x5b, 0x76, 0x36, 0x79, 0x0e, 0x9f, 0x92, 0x38, 0x32, 0x5f, 0x80,
	0x67, 0xbc, 0xd7, 0xc8, 0x88, 0xd3, 0xa6, 0x45, 0x9a, 0x1e, 0x12, 0xcb, 0x71, 0x94, 0x3f, 0xb5,
	0x4b, 0xcb, 0x49, 0x1b, 0x20, 0x07, 0x4a, 0x5a, 0x4b, 0x44, 0x24, 0x52, 0xe5, 0xae, 0x1c, 0x28,
	0x87, 0x1e, 0x8a, 0x5e, 0xfa, 0x09, 0x0a, 0xf4, 0xab, 0xf4, 0xd0, 0x43, 0xd1, 0xaf, 0xd3, 0x43,
	0x2f, 0xbd, 0x16, 0xfb, 0x8f, 0xa2, 0x6c, 0x92, 0xa2, 0x62, 0x1b, 0xe8, 0xc5, 0xe6, 0xec, 0xce,
	0xfc, 0x76, 0x66, 0x76, 0xf7, 0x37, 0xb3, 0x82, 0x9d, 0xae, 0x4d, 0x7b, 0xa3, 0x56, 0xad, 0xed,
	0x0e, 0x36, 0xdf, 0xf7, 0xc8, 0xd8, 0x1d, 0x79, 0x96, 0xbd, 0x49, 0x71, 0xa7, 0x33, 0xbe, 0xdd,
	0xb2, 0xda, 0x6f, 0xb1, 0xd3, 0xd9, 0x6c, 0xbb, 0x83, 0x81, 0xeb, 0x6c, 0x0e, 0x3d, 0x97, 0xba,
	0x9b, 0x6d, 0xd7, 0xa1, 0xd8, 0xa1, 0xea, 0x7f, 0x8d, 0x8f, 0xa2, 0x4b, 0xdc, 0xa2, 0x46, 0xbc,
	0xe3, 0x9a, 0x9c, 0xa8, 0xdc, 0x0d, 0x20, 0x77, 0xdd, 0xbe, 0xe5, 0x74, 0x05, 0x42, 0x6b, 0x74,
	0xb4, 0x39, 0xa4, 0xe3, 0x21, 0x26, 0x9b, 0x78, 0x30, 0xa4, 0x63, 0xf1, 0x57, 0xe0, 0x54, 0x3e,
	0x9f, 0x6d, 0x44, 0xed, 0x01, 0x26, 0xd4, 0x1a, 0x0c, 0x27, 0x5f, 0xc2, 0xd8, 0xf8, 0x08, 0x32,
	0x07, 0xae, 0x47, 0x11, 0x82, 0x8c, 0x63, 0x0d, 0xb0, 0xae, 0x55, 0xb5, 0x8d, 0xa2, 0xc9, 0xbf,
	0xd1, 0x0a, 0xa4, 0x2d, 0xd2, 0xd6, 0x53, 0x55, 0x6d, 0xa3, 0x60, 0xb2, 0x4f, 0xe3, 0x17, 0x0d,
	0xd2, 0x4d, 0xab, 0xcb, 0x66, 0xa8, 0xd5, 0x95, 0xca, 0xec, 0x93, 0xd9, 0xb3, 0xa5, 0xb8, 0x72,
	0xd1, 0xe4, 0xdf, 0xe8, 0x0a, 0x64, 0x47, 0xc4, 0xea, 0x62, 0x3d, 0x5d, 0xd5, 0x36, 0x32, 0xa6,
	0x10, 0xd0, 0x7d, 0x80, 0xb6, 0x87, 0x2d, 0x8a, 0x9b, 0xf6, 0x00, 0xeb, 0x99, 0xaa, 0xb6, 0x51,
	0xda, 0xaa, 0xd4, 0xba, 0xae, 0xdb, 0xed, 0xe3, 0x9a, 0x72, 0xbc, 0xd6, 0x54, 0x7e, 0x9a, 0x01,
	0x6d, 0xf4, 0x00, 0x4a, 0x7d, 0x8b, 0xd0, 0x43, 0x22, 0x8c, 0xb3, 0x33, 0x8d, 0x83, 0xea, 0xc6,
	0x16, 0x40, 0xd3, 0xea, 0x3e, 0x74, 0x3a, 0x4d, 0xe6, 0x5d, 0xa2, 0x18, 0x8c, 0xdf, 0x0b, 0x90,
	0x69, 0x38, 0x47, 0x2e, 0x5a, 0x85, 0x9c, 0xed, 0x1c, 0xb9, 0x8d, 0xba, 0xb4, 0x90, 0x12, 0x83,
	0x19, 0xd9, 0x1d, 0x69, 0xc3, 0x3e, 0x99, 0xa6, 0x35, 0xa2, 0x3d, 0xd7, 0xe3, 0x71, 0x17, 0x4d,
	0x29, 0xb1, 0x74, 0x50, 0x9b, 0xf6, 0x45, 0xcc, 0x45, 0x53, 0x08, 0x48, 0x87, 0x3c, 0x19, 0x0d,
	0x06, 0x96, 0x37, 0xe6, 0xe1, 0x14, 0x4d, 0x25, 0xb2, 0x99, 0xb6, 0x3b, 0x72, 0xa8, 0x37, 0xd6,
	0x73, 0x62, 0x46, 0x8a, 0x2c, 0x0d, 0xf2, 0xc4, 0xf0, 0x34, 0xe4, 0x67, 0xa7, 0x21, 0xa0, 0x8e,
	0x0e, 0xa0, 0xdc, 0x76, 0x8f, 0xb1, 0x67, 0x62, 0xe2, 0x8e, 0xbc, 0x36, 0x26, 0x7a, 0xa1, 0x9a,
	0xde, 0x28, 0x6d, 0xfd, 0xbf, 0x76, 0xea, 0x40, 0xd6, 0x58, 0xe8, 0xb5, 0xed, 0x29, 0xed, 0x1d,
	0xe6, 0x82, 0x79, 0x02, 0x82, 0xb9, 0x34, 0x1c, 0xb5, 0xfa, 0x36, 0xe9, 0x71, 0x97, 0x8a, 0xb3,
	0x5d, 0x0a, 0xa8, 0xa3, 0x47, 0x50, 0x66, 0x1b, 0x65, 0xe2, 0x63, 0x1b, 0xbf, 0xe3, 0x00, 0x30,
	0x13, 0xe0, 0x84, 0x05, 0x5a, 0x03, 0x78, 0x67, 0xd1, 0x76, 0x6f, 0x9b, 0x25, 0x49, 0x2f, 0xf1,
	0x23, 0x17, 0x18, 0x41, 0x77, 0x20, 0x43, 0xad, 0x2e, 0xd1, 0x17, 0x79, 0xb0, 0x37, 0x42, 0x82,
	0x9d, 0x1c, 0x0e, 0x93, 0xab, 0xa2, 0x0a, 0x14, 0x68, 0x6f, 0x34, 0x68, 0x1d, 0x0e, 0x89, 0xbe,
	0xc4, 0x01, 0x7d, 0x19, 0x5d, 0x87, 0xa2, 0x4d, 0x9a, 0x42, 0xd2, 0xcb, 0xfc, 0x8a, 0x4c, 0x06,
	0x50, 0x15, 0x4a, 0x52, 0xf3, 0xb9, 0x4d, 0xa8, 0xbe, 0x5c, 0x4d, 0x6f, 0x14, 0xcd, 0xe0, 0x10,
	0x73, 0x97, 0x8b, 0x75, 0xf7, 0x9d, 0x43, 0xf4, 0x15, 0xe1, 0xee, 0x64, 0x84, 0x21, 0x48, 0x38,
	0x26, 0xeb, 0x97, 0xf8, 0x0a, 0xc1, 0x21, 0x74, 0x0b, 0x96, 0x7c, 0x7d, 0xbe, 0x0a, 0xe2, 0xab,
	0x4c, 0x0f, 0x32, 0x3f, 0x8f, 0xac, 0x63, 0xd7, 0xb3, 0x29, 0x26, 0xfa, 0x65, 0xbe, 0xcc, 0x64,
	0x80, 0x79, 0x61, 0x93, 0xc7, 0x52, 0xd4, 0xaf, 0xf0, 0x45, 0x02, 0x23, 0xc8, 0x80, 0x45, 0xa5,
	0xcc, 0x97, 0xf8, 0x17, 0x5f, 0x62, 0x6a, 0x4c, 0x6d, 0xde, 0x0b, 0xb7, 0x63, 0x1f, 0x8d, 0xf9,
	0xe6, 0xad, 0x26, 0xdb, 0xbc, 0x89, 0x05, 0xf3, 0xb2, 0x6d, 0x39, 0x62, 0x37, 0xf5, 0xab, 0x22,
	0x9b, 0xfe, 0x00, 0xbb, 0x39, 0xc7, 0x56, 0xdf, 0xee, 0xe8, 0x3a, 0x9f, 0x11, 0x02, 0xdb, 0x1d,
	0xcb, 0x6b, 0xf7, 0xec, 0x63, 0xdc, 0xd1, 0xff, 0xcd, 0x27, 0x7c, 0x19, 0x6d, 0xc0, 0xf2, 0x73,
	0x8b, 0x62, 0x42, 0x0f, 0x70, 0x77, 0x80, 0x1d, 0xda, 0xa8, 0xeb, 0x15, 0x7e, 0x87, 0x4e, 0x0e,
	0xb3, 0x08, 0xa5, 0x20, 0x0e, 0xce, 0x35, 0x9e, 0xa2, 0xa9, 0xb1, 0xca, 0x43, 0xb8, 0x1c, 0x72,
	0x07, 0xd8, 0xd5, 0x7f, 0x8b, 0xc7, 0x8a, 0x41, 0xde, 0xe2, 0xb1, 0x74, 0x74, 0xa4, 0x28, 0x44,
	0x08, 0xf7, 0x53, 0x9f, 0x69, 0xc6, 0x1f, 0x1a, 0xe4, 0x25, 0x26, 0x2a, 0x43, 0xca, 0xee, 0x48,
	0xb3, 0x94, 0x20, 0x0c, 0x49, 0x2d, 0xa9, 0x29, 0x6a, 0x29, 0x43, 0xca, 0x71, 0x25, 0x79, 0xa6,
	0x1c, 0x37, 0x82, 0x40, 0x56, 0x21, 0xd7, 0xb7, 0x5a, 0xb8, 0x4f, 0xf4, 0x2c, 0xdf, 0x1c, 0x29,
	0xa1, 0x87, 0x8c, 0x3e, 0xf8, 0xc1, 0xd6, 0x73, 0xfc, 0xc8, 0xff, 0x37, 0xe4, 0xc8, 0x4b, 0x97,
	0x6a, 0xdb, 0x42, 0x16, 0x77, 0x5b, 0xd9, 0x55, 0xee, 0xc3, 0x62, 0x70, 0x62, 0xae, 0x80, 0x8f,
	0xa1, 0xb8, 0x8b, 0x69, 0xd3, 0xea, 0x9a, 0xf8, 0x5b, 0xc6, 0xac, 0x43, 0x56, 0x08, 0x98, 0xe5,
	0x92, 0xc9, 0xbf, 0xd9, 0x18, 0xb1, 0xdf, 0x0b, 0xcb, 0x25, 0x93, 0x7f, 0xfb, 0x0c, 0x9c, 0x0e,
	0x54, 0x91, 0xdb, 0x90, 0x25, 0xae, 0x47, 0x89, 0x9e, 0xe1, 0x51, 0x5c, 0x0d, 0x8b, 0xc2, 0xf5,
	0xa8, 0x29, 0xb4, 0x8c, 0x11, 0xc0, 0x61, 0xa3, 0xbe, 0x6f, 0x75, 0xf1, 0x3c, 0x0b, 0xfb, 0x8b,
	0xa4, 0x93, 0x2c, 0xa2, 0x48, 0x3f, 0xe3, 0x93, 0xbe, 0xf1, 0x0d, 0x94, 0x44, 0xb8, 0xc4, 0xc4,
	0x64, 0xc8, 0x6f, 0xb7, 0x4b, 0xad, 0xbe, 0x38, 0x53, 0x9a, 0xbc, 0xdd, 0xfe, 0x08, 0xfa, 0x9f,
	0x24, 0xa3, 0x14, 0x5f, 0x6e, 0x35, 0x9c, 0x8c, 0x04, 0x0b, 0x19, 0xb7, 0x00, 0x18, 0x0d, 0xef,
	0x39, 0x3c, 0xa2, 0x88, 0x3a, 0x64, 0xfc, 0x95, 0x82, 0xf2, 0xbe, 0xa0, 0x54, 0xa6, 0xcd, 0x54,
	0xa5, 0x97, 0x5a, 0x58, 0x69, 0x4a, 0x85, 0x97, 0xa6, 0x74, 0x44, 0x69, 0xca, 0x44, 0x96, 0xa6,
	0xec, 0x74, 0x69, 0x52, 0x2c, 0x9b, 0x4b, 0xce, 0xb2, 0x6f, 0x4e, 0xd5, 0xa3, 0x3c, 0x37, 0xfe,
	0x24, 0xc4, 0x78, 0x3a, 0xc2, 0x44, 0x95, 0x69, 0x8a, 0x5a, 0x0a, 0x27, 0xa8, 0xe5, 0x3c, 0xae,
	0xf6, 0x8f, 0x69, 0x28, 0xed, 0x74, 0x6c, 0xaa, 0xd2, 0xfe, 0x4f, 0xea, 0x14, 0xd4, 0x76, 0xe4,
	0x93, 0x6f, 0xc7, 0xeb, 0x88, 0xf6, 0x60, 0x2b, 0xc4, 0x38, 0x10, 0xf6, 0xfc, 0x7b, 0x51, 0xbc,
	0x80, 0xbd, 0xf8, 0x49, 0x83, 0xf2, 0x2e, 0x56, 0xf4, 0x4e, 0xe6, 0xa1, 0x80, 0xc9, 0xb6, 0xa5,
	0xa7, 0xb6, 0x6d, 0xc2, 0xaf, 0x99, 0x29, 0x7e, 0xf5, 0x29, 0x23, 0x9b, 0x88, 0x97, 0x5a, 0x50,
	0x50, 0x5e, 0xcd, 0x64, 0x87, 0x7b, 0x50, 0x20, 0x52, 0x57, 0x32, 0x44, 0x25, 0x9a, 0xbb, 0x4d,
	0x5f, 0xd7, 0xf8, 0x53, 0x83, 0x4b, 0xf2, 0x86, 0xa8, 0xc9, 0x98, 0xf3, 0x28, 0xca, 0x0b, 0x4b,
	0x41, 0x7a, 0xba, 0xbc, 0xa4, 0xc3, 0xcb, 0xcb, 0x74, 0xf8, 0xcf, 0x26, 0xe5, 0x45, 0x24, 0xe0,
	0x4e, 0xf4, 0x75, 0x9d, 0x38, 0x73, 0x01, 0x85, 0xe6, 0xfb, 0x14, 0x94, 0xd9, 0x39, 0x4c, 0x10,
	0xf1, 0x15, 0xc8, 0x12, 0xdc, 0xf5, 0xeb, 0xac, 0x10, 0x02, 0x65, 0x36, 0xfd, 0x01, 0x65, 0xf6,
	0xc9, 0xc9, 0x32, 0x5b, 0x8b, 0xb8, 0x27, 0x17, 0x9a, 0x84, 0x2f, 0x60, 0x49, 0xe2, 0xc7, 0x97,
	0x89, 0xf0, 0x14, 0x18, 0x3f, 0x68, 0x50, 0x6e, 0x38, 0x04, 0x7b, 0xf4, 0x25, 0x83, 0x4c, 0x04,
	0x90, 0x0e, 0xe6, 0xb0, 0x06, 0x19, 0x9a, 0xec, 0x39, 0xc7, 0xf5, 0x26, 0x91, 0x64, 0x03, 0x91,
	0x18, 0x3f, 0x6b, 0xb0, 0xc8, 0x52, 0xf5, 0x81, 0x4e, 0xac, 0x42, 0x8e, 0xe5, 0xb2, 0x51, 0x97,
	0x3b, 0x27, 0x25, 0xdf, 0xb9, 0xec, 0xbc, 0xce, 0xe5, 0x82, 0xce, 0x1d, 0x40, 0x89, 0xfb, 0x95,
	0x34, 0xc1, 0x49, 0x5c, 0x33, 0xee, 0x01, 0xec, 0x62, 0x1a, 0x5b, 0xb0, 0xc3, 0x5a, 0x43, 0xe3,
	0x57, 0x8d, 0xf7, 0x1b, 0xcc, 0x90, 0x84, 0x5b, 0x2a, 0xda, 0x4b, 0x85, 0xd0, 0x5e, 0x3a, 0xac,
	0xf3, 0x49, 0xd4, 0x5e, 0x4d, 0x2e, 0x47, 0x36, 0x78, 0x39, 0xe6, 0xaf, 0xfa, 0xc6, 0x1b, 0x58,
	0x9c, 0x04, 0x90, 0xa0, 0x63, 0xba, 0x0d, 0x59, 0x16, 0xbb, 0x22, 0xc4, 0xab, 0x11, 0x8f, 0x55,
	0x53, 0x68, 0x19, 0x0f, 0x60, 0xa5, 0xc1, 0x53, 0xf5, 0xca, 0xa6, 0xbd, 0xc3, 0x46, 0x7d, 0xbe,
	0xf4, 0x7e, 0x07, 0x4b, 0xc2, 0x5a, 0xf5, 0x91, 0x51, 0xbb, 0x7d, 0x31, 0x59, 0x36, 0xf6, 0xa0,
	0x74, 0x28, 0x5c, 0xe7, 0xaf, 0xa3, 0xd3, 0x8e, 0xab, 0x23, 0x9d, 0x4a, 0x76, 0xa4, 0x8d, 0x6d,
	0x28, 0x1d, 0x12, 0xec, 0x35, 0xea, 0x22, 0xd9, 0x1f, 0x43, 0xd6, 0xa6, 0x78, 0x40, 0x74, 0x8d,
	0xbb, 0xb3, 0x16, 0xe2, 0x4e, 0x60, 0x7d, 0x53, 0x28, 0x1b, 0x5f, 0x33, 0x92, 0x50, 0x39, 0xe5,
	0x8e, 0xa9, 0xb4, 0x74, 0xa6, 0xd2, 0x32, 0xbf, 0x7b, 0x8f, 0xa1, 0x24, 0x90, 0x85, 0x7b, 0x9f,
	0x4e, 0xbb, 0xb7, 0x1e, 0xb1, 0xd7, 0xa7, 0x3c, 0xdc, 0xfa, 0x6d, 0x05, 0xf2, 0x92, 0x43, 0x51,
	0x03, 0xf2, 0xb2, 0x23, 0x47, 0xd7, 0x43, 0x00, 0xfc, 0xc7, 0x49, 0x65, 0x2d, 0x72, 0x96, 0x7b,
	0x63, 0x2c, 0xa0, 0xa7, 0x50, 0x0a, 0x34, 0x9e, 0x68, 0x7d, 0x66, 0x63, 0x5a, 0x59, 0x3d, 0x15,
	0xf2, 0xce, 0x60, 0x48, 0xc7, 0xc6, 0x02, 0xaa, 0x43, 0x41, 0x75, 0x4d, 0x68, 0x2d, 0xbe, 0xa5,
	0x8a, 0x41, 0xd9, 0xe6, 0xc1, 0x71, 0x90, 0x1b, 0xe1, 0xee, 0x2b, 0x8c, 0xa8, 0x8b, 0x62, 0x2c,
	0xa0, 0x17, 0x50, 0x50, 0x57, 0x10, 0xad, 0x45, 0xa3, 0x30, 0x82, 0xa9, 0xdc, 0x8c, 0x9d, 0xe7,
	0x59, 0xda, 0x01, 0xa8, 0xe3, 0x3e, 0xa6, 0x38, 0xd2, 0xad, 0xc9, 0x33, 0x26, 0x36, 0x41, 0xc5,
	0x57, 0x16, 0x6d, 0xf7, 0xce, 0x86, 0xb2, 0xc7, 0xf9, 0xd1, 0xef, 0xb8, 0xd6, 0xc3, 0xdd, 0x0f,
	0xf4, 0x89, 0x95, 0x6b, 0xd1, 0x2d, 0x16, 0x31, 0x16, 0xd0, 0x73, 0xce, 0xd4, 0xea, 0x09, 0x5f,
	0x8d, 0x56, 0x96, 0xae, 0xc5, 0x74, 0x6c, 0xc6, 0x02, 0xda, 0xf7, 0x1f, 0x6b, 0x0a, 0xf1, 0x56,
	0x92, 0xf6, 0x29, 0x26, 0xe0, 0xa7, 0xe2, 0x11, 0xa2, 0xe0, 0xd6, 0x67, 0x76, 0x21, 0x31, 0x58,
	0xcf, 0x60, 0x49, 0xec, 0x64, 0xf2, 0x70, 0x63, 0x1d, 0x0b, 0xb4, 0x16, 0x28, 0xfc, 0x32, 0x07,
	0x5b, 0x8f, 0x18, 0xac, 0xc7, 0x50, 0xf4, 0xfb, 0x03, 0x74, 0x33, 0x22, 0xc4, 0x04, 0x38, 0xbb,
	0x50, 0x12, 0x01, 0x0a, 0xa4, 0xb0, 0xc3, 0x1f, 0xa8, 0xf5, 0x31, 0x40, 0x4f, 0x20, 0xaf, 0x7e,
	0xf2, 0xfb, 0x4f, 0x2c, 0x4b, 0x89, 0x12, 0x14, 0x83, 0xf4, 0xa5, 0xca, 0xf9, 0x39, 0xe1, 0x7d,
	0xc5, 0x1f, 0x42, 0x8c, 0xf4, 0x15, 0xe0, 0x8d, 0x70, 0x96, 0x97, 0x25, 0x2e, 0x94, 0x06, 0x03,
	0xa4, 0x6c, 0x2c, 0xa0, 0x26, 0x87, 0x64, 0x63, 0xfe, 0xcf, 0x9c, 0x91, 0x36, 0x71, 0xa8, 0x81,
	0x4a, 0xc4, 0xcf, 0x47, 0x71, 0xf2, 0x9b, 0xe6, 0x19, 0x83, 0xde, 0x87, 0xe5, 0x40, 0x12, 0xcf,
	0x03, 0xf1, 0x00, 0x56, 0x82, 0x69, 0xe4, 0x90, 0x67, 0x4e, 0xe4, 0x4b, 0x0e, 0xea, 0x27, 0x92,
	0x83, 0x9e, 0x47, 0x2a, 0x1b, 0x50, 0xf0, 0x7f, 0xb9, 0x3d, 0x63, 0xdc, 0x7b, 0x50, 0x16, 0x99,
	0x3c, 0x2f, 0x40, 0x13, 0x96, 0x65, 0x22, 0x7d, 0xc4, 0x33, 0xe7, 0xf1, 0x90, 0x63, 0xb2, 0x31,
	0x1f, 0xf3, 0x1c, 0xd2, 0xf8, 0xa8, 0xf8, 0x5a, 0xbd, 0xc9, 0x5a, 0x39, 0x1e, 0xc7, 0xdd, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x93, 0xe5, 0xd6, 0xf7, 0xf3, 0x1b, 0x00, 0x00,
}
